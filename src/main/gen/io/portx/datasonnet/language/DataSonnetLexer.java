// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: DataSonnet.flex

package io.portx.datasonnet.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.portx.datasonnet.language.psi.DataSonnetTypes.*;

class DataSonnetLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\11\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\1\32\4\33"+
    "\1\34\3\33\1\35\4\33\1\36\14\33\1\37\1\40"+
    "\1\41\1\42\1\33\1\0\1\43\1\33\1\44\1\45"+
    "\1\46\1\47\1\33\1\50\1\51\2\33\1\52\1\53"+
    "\1\54\1\55\1\56\1\33\1\57\1\60\1\61\1\62"+
    "\3\33\1\63\1\33\1\64\1\65\1\66\1\67\6\0"+
    "\1\1\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\1\3\30\1\31\1\32\1\33\11\30\1\34\1\35"+
    "\1\36\1\37\1\40\1\4\1\0\1\41\1\11\2\0"+
    "\1\42\1\0\1\22\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\11\30\1\53\1\30\1\54\6\30"+
    "\1\55\2\0\2\22\1\56\1\51\1\52\1\30\1\22"+
    "\5\30\1\57\10\30\1\60\2\0\1\42\3\30\1\61"+
    "\5\30\1\62\1\63\1\30\1\64\1\65\2\0\3\30"+
    "\1\66\1\67\2\30\1\70\1\71\2\0\1\30\1\72"+
    "\2\30\1\73\2\0\1\30\1\74\2\30\2\0\1\75"+
    "\1\30\1\76\1\22\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\70"+
    "\0\u0150\0\u0188\0\70\0\70\0\70\0\70\0\70\0\u01c0"+
    "\0\70\0\u01f8\0\u0230\0\u0268\0\u02a0\0\70\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\70\0\70\0\70"+
    "\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8"+
    "\0\u0620\0\70\0\u0658\0\70\0\70\0\70\0\70\0\u0690"+
    "\0\70\0\70\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0"+
    "\0\70\0\70\0\70\0\70\0\70\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u03b8\0\u0a80\0\u03b8\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\70\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u03b8\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u03b8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u03b8\0\u10a0\0\u10d8\0\70\0\u1110\0\u1148\0\u1180"+
    "\0\u03b8\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u03b8\0\u03b8"+
    "\0\u12d0\0\u03b8\0\u03b8\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\u03b8\0\u03b8\0\u1420\0\u1458\0\u03b8\0\u03b8\0\u1490\0\u14c8"+
    "\0\u1500\0\u03b8\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650"+
    "\0\u03b8\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u03b8\0\u1768\0\70"+
    "\0\70\0\u03b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\33\1\34\1\35\1\36\1\2\1\37\1\40"+
    "\1\41\1\33\1\42\1\43\1\44\1\33\1\45\1\46"+
    "\1\33\1\47\3\33\1\50\1\51\2\33\1\52\1\53"+
    "\1\54\1\55\71\0\3\3\114\0\1\56\37\0\5\5"+
    "\1\57\32\5\1\60\27\5\2\6\1\0\65\6\11\0"+
    "\1\61\56\0\12\12\1\62\25\12\1\63\27\12\35\0"+
    "\1\64\47\0\1\65\4\0\1\6\66\0\1\66\12\0"+
    "\1\67\11\0\1\67\42\0\1\66\1\0\2\24\7\0"+
    "\1\67\11\0\1\67\46\0\1\70\71\0\1\71\1\72"+
    "\67\0\1\73\67\0\1\74\1\75\43\0\1\76\4\0"+
    "\1\77\100\0\2\33\6\0\4\33\4\0\21\33\27\0"+
    "\2\33\6\0\4\33\4\0\11\33\1\100\7\33\27\0"+
    "\2\33\6\0\4\33\4\0\1\101\20\33\27\0\2\33"+
    "\6\0\4\33\4\0\15\33\1\102\3\33\27\0\2\33"+
    "\6\0\4\33\4\0\3\33\1\103\15\33\27\0\2\33"+
    "\6\0\4\33\4\0\7\33\1\104\4\33\1\105\4\33"+
    "\27\0\2\33\6\0\4\33\4\0\1\106\11\33\1\107"+
    "\4\33\1\110\1\33\27\0\2\33\6\0\4\33\4\0"+
    "\4\33\1\111\3\33\1\112\1\113\7\33\27\0\2\33"+
    "\6\0\4\33\4\0\12\33\1\114\6\33\27\0\2\33"+
    "\6\0\4\33\4\0\17\33\1\115\1\33\27\0\2\33"+
    "\6\0\4\33\4\0\3\33\1\116\13\33\1\117\1\33"+
    "\27\0\2\33\6\0\4\33\4\0\5\33\1\120\6\33"+
    "\1\121\4\33\71\0\1\122\2\0\2\5\2\0\64\5"+
    "\2\12\2\0\64\12\54\0\1\123\13\0\15\65\1\124"+
    "\52\65\23\0\2\125\61\0\1\126\1\0\1\126\2\0"+
    "\2\126\70\0\1\127\42\0\5\76\1\130\62\76\12\77"+
    "\1\131\55\77\23\0\2\33\6\0\4\33\4\0\4\33"+
    "\1\132\14\33\27\0\2\33\6\0\3\33\1\133\4\0"+
    "\21\33\27\0\2\33\6\0\4\33\4\0\15\33\1\134"+
    "\3\33\27\0\2\33\6\0\4\33\4\0\4\33\1\135"+
    "\14\33\27\0\2\33\6\0\4\33\4\0\15\33\1\136"+
    "\3\33\27\0\2\33\6\0\4\33\4\0\14\33\1\137"+
    "\4\33\27\0\2\33\6\0\4\33\4\0\7\33\1\140"+
    "\11\33\27\0\2\33\6\0\4\33\4\0\14\33\1\141"+
    "\4\33\27\0\2\33\6\0\4\33\4\0\11\33\1\142"+
    "\7\33\27\0\2\33\6\0\4\33\4\0\13\33\1\143"+
    "\5\33\27\0\2\33\6\0\4\33\4\0\1\33\1\144"+
    "\17\33\27\0\2\33\6\0\4\33\4\0\7\33\1\145"+
    "\11\33\27\0\2\33\6\0\4\33\4\0\7\33\1\146"+
    "\11\33\27\0\2\33\6\0\4\33\4\0\13\33\1\147"+
    "\5\33\27\0\2\33\6\0\4\33\4\0\3\33\1\150"+
    "\15\33\27\0\2\33\6\0\4\33\4\0\17\33\1\151"+
    "\1\152\71\0\1\153\51\0\1\154\20\0\15\65\1\124"+
    "\4\65\1\155\45\65\23\0\2\125\7\0\1\67\11\0"+
    "\1\67\44\0\2\126\50\0\1\76\74\0\1\77\100\0"+
    "\2\33\6\0\4\33\4\0\6\33\1\156\12\33\27\0"+
    "\2\33\6\0\4\33\4\0\3\33\1\157\15\33\27\0"+
    "\2\33\6\0\4\33\4\0\1\160\20\33\27\0\2\33"+
    "\6\0\4\33\4\0\3\33\1\161\15\33\27\0\2\33"+
    "\6\0\4\33\4\0\12\33\1\162\6\33\27\0\2\33"+
    "\6\0\4\33\4\0\15\33\1\163\3\33\27\0\2\33"+
    "\6\0\4\33\4\0\1\33\1\164\17\33\27\0\2\33"+
    "\6\0\4\33\4\0\12\33\1\165\6\33\27\0\2\33"+
    "\6\0\4\33\4\0\1\166\20\33\27\0\2\33\6\0"+
    "\4\33\4\0\7\33\1\167\11\33\27\0\2\33\6\0"+
    "\4\33\4\0\4\33\1\170\14\33\27\0\2\33\6\0"+
    "\4\33\4\0\3\33\1\171\15\33\27\0\2\33\6\0"+
    "\4\33\4\0\11\33\1\172\7\33\27\0\2\33\6\0"+
    "\4\33\4\0\3\33\1\173\15\33\5\0\1\153\1\174"+
    "\1\153\135\0\1\175\41\0\2\33\6\0\4\33\4\0"+
    "\11\33\1\176\7\33\27\0\2\33\6\0\4\33\4\0"+
    "\14\33\1\177\4\33\27\0\2\33\6\0\4\33\4\0"+
    "\17\33\1\200\1\33\27\0\2\33\6\0\4\33\4\0"+
    "\14\33\1\201\4\33\27\0\2\33\6\0\4\33\4\0"+
    "\3\33\1\202\15\33\27\0\2\33\6\0\4\33\4\0"+
    "\16\33\1\203\2\33\27\0\2\33\6\0\4\33\4\0"+
    "\14\33\1\204\4\33\27\0\2\33\6\0\4\33\4\0"+
    "\7\33\1\205\11\33\27\0\2\33\6\0\4\33\4\0"+
    "\14\33\1\206\4\33\5\0\3\207\140\0\1\210\36\0"+
    "\2\33\6\0\4\33\4\0\6\33\1\211\12\33\27\0"+
    "\2\33\6\0\4\33\4\0\16\33\1\212\2\33\27\0"+
    "\2\33\6\0\4\33\4\0\7\33\1\213\11\33\27\0"+
    "\2\33\6\0\4\33\4\0\6\33\1\214\12\33\27\0"+
    "\2\33\6\0\4\33\4\0\16\33\1\215\2\33\4\0"+
    "\65\207\1\216\2\207\51\0\1\217\41\0\2\33\6\0"+
    "\4\33\4\0\16\33\1\220\2\33\27\0\2\33\6\0"+
    "\4\33\4\0\16\33\1\221\2\33\27\0\2\33\6\0"+
    "\4\33\4\0\12\33\1\222\6\33\27\0\2\33\6\0"+
    "\4\33\4\0\15\33\1\223\3\33\4\0\65\207\1\224"+
    "\2\207\61\0\1\225\31\0\2\33\6\0\4\33\4\0"+
    "\20\33\1\133\27\0\2\33\6\0\4\33\4\0\11\33"+
    "\1\226\7\33\27\0\2\33\6\0\4\33\4\0\16\33"+
    "\1\227\2\33\4\0\65\207\1\230\2\207\63\0\1\231"+
    "\27\0\2\33\6\0\4\33\4\0\14\33\1\232\4\33"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6048];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\2\1\5\11\1\1\1\11"+
    "\4\1\1\11\7\1\3\11\11\1\1\11\1\1\4\11"+
    "\1\0\2\11\2\0\1\1\1\0\2\1\5\11\25\1"+
    "\2\0\2\1\1\11\23\1\2\0\1\11\16\1\2\0"+
    "\11\1\2\0\5\1\2\0\4\1\2\0\2\1\2\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  //private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  //private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DataSonnetLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 64: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 65: break;
          case 3:
            { return EXCLAMATION;
            }
          // fall through
          case 66: break;
          case 4:
            { return DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 67: break;
          case 5:
            { return LINE_COMMENT;
            }
          // fall through
          case 68: break;
          case 6:
            { return DOLLAR;
            }
          // fall through
          case 69: break;
          case 7:
            { return PERCENT;
            }
          // fall through
          case 70: break;
          case 8:
            { return AND;
            }
          // fall through
          case 71: break;
          case 9:
            { return SINGLE_QUOTED_STRING;
            }
          // fall through
          case 72: break;
          case 10:
            { return L_PAREN;
            }
          // fall through
          case 73: break;
          case 11:
            { return R_PAREN;
            }
          // fall through
          case 74: break;
          case 12:
            { return ASTERISK;
            }
          // fall through
          case 75: break;
          case 13:
            { return PLUS;
            }
          // fall through
          case 76: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 77: break;
          case 15:
            { return MINUS;
            }
          // fall through
          case 78: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 79: break;
          case 17:
            { return SLASH;
            }
          // fall through
          case 80: break;
          case 18:
            { return NUMBER;
            }
          // fall through
          case 81: break;
          case 19:
            { return COLON;
            }
          // fall through
          case 82: break;
          case 20:
            { return SEMICOLON;
            }
          // fall through
          case 83: break;
          case 21:
            { return LESS_THAN;
            }
          // fall through
          case 84: break;
          case 22:
            { return EQUAL;
            }
          // fall through
          case 85: break;
          case 23:
            { return GREATER_THAN;
            }
          // fall through
          case 86: break;
          case 24:
            { return IDENTIFIER;
            }
          // fall through
          case 87: break;
          case 25:
            { return L_BRACKET;
            }
          // fall through
          case 88: break;
          case 26:
            { return R_BRACKET;
            }
          // fall through
          case 89: break;
          case 27:
            { return CARAT;
            }
          // fall through
          case 90: break;
          case 28:
            { return L_CURLY;
            }
          // fall through
          case 91: break;
          case 29:
            { return BAR;
            }
          // fall through
          case 92: break;
          case 30:
            { return R_CURLY;
            }
          // fall through
          case 93: break;
          case 31:
            { return TILDE;
            }
          // fall through
          case 94: break;
          case 32:
            { return NOT_EQUAL;
            }
          // fall through
          case 95: break;
          case 33:
            { return DOUBLE_AND;
            }
          // fall through
          case 96: break;
          case 34:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 97: break;
          case 35:
            { return COLON2;
            }
          // fall through
          case 98: break;
          case 36:
            { return DOUBLE_LESS;
            }
          // fall through
          case 99: break;
          case 37:
            { return LESS_EQUAL;
            }
          // fall through
          case 100: break;
          case 38:
            { return DOUBLE_EQUAL;
            }
          // fall through
          case 101: break;
          case 39:
            { return GREATER_EQUAL;
            }
          // fall through
          case 102: break;
          case 40:
            { return DOUBLE_GREATER;
            }
          // fall through
          case 103: break;
          case 41:
            { return VERBATIM_DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 104: break;
          case 42:
            { return VERBATIM_SINGLE_QUOTED_STRING;
            }
          // fall through
          case 105: break;
          case 43:
            { return IF;
            }
          // fall through
          case 106: break;
          case 44:
            { return IN;
            }
          // fall through
          case 107: break;
          case 45:
            { return DOUBLE_BAR;
            }
          // fall through
          case 108: break;
          case 46:
            { return COLON3;
            }
          // fall through
          case 109: break;
          case 47:
            { return FOR;
            }
          // fall through
          case 110: break;
          case 48:
            { return TRY;
            }
          // fall through
          case 111: break;
          case 49:
            { return ELSE;
            }
          // fall through
          case 112: break;
          case 50:
            { return NULL;
            }
          // fall through
          case 113: break;
          case 51:
            { return SELF;
            }
          // fall through
          case 114: break;
          case 52:
            { return THEN;
            }
          // fall through
          case 115: break;
          case 53:
            { return TRUE;
            }
          // fall through
          case 116: break;
          case 54:
            { return ERROR;
            }
          // fall through
          case 117: break;
          case 55:
            { return FALSE;
            }
          // fall through
          case 118: break;
          case 56:
            { return LOCAL;
            }
          // fall through
          case 119: break;
          case 57:
            { return SUPER;
            }
          // fall through
          case 120: break;
          case 58:
            { return ASSERT;
            }
          // fall through
          case 121: break;
          case 59:
            { return IMPORT;
            }
          // fall through
          case 122: break;
          case 60:
            { return DEFAULT;
            }
          // fall through
          case 123: break;
          case 61:
            { return FUNCTION;
            }
          // fall through
          case 124: break;
          case 62:
            { return TRIPLE_BAR_QUOTED_STRING;
            }
          // fall through
          case 125: break;
          case 63:
            { return IMPORTSTR;
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
